#include "/home/terra/TerraNG/terra/TerraNet.defs"

#define N_NODES 8
#define MAX_HOPS 4

// 5 types of messages:
    // NEIGHBOURS package with nodeId to be used in INITIALIZATION ROUTINE
    
    // EVENT AGENT - carries information that an event was detected

    // INTEREST AGENT - carries information that a node has interest in event

    // EVENT INFORMATION - carries the actual info on the event

    // REQUEST - requests an event information


var ushort nodeId = getNodeId();

// DIFFERENT MESSAGE TYPES
#define NEIGHBOUR_INFO       1

#define MIN 0
#define MAX 1

// DEBUG INFO
#define SOURCE 1
#define INTEREST 2
#define INFO 3
#define REQUEST 4

//Types are build as 2*(TYPE) + (MIN/MAX)
// So SOURCE_MIN = 2 SOURCE_MAX = 3 INFO_MIN = 4 INFO_MAX = 5 etc

#define TYPE(X,Y) ((X * 2) + Y)
#define GET_TYPE(X) (X / 2)
#define GET_MIN_MAX(X) (X % 2)


pktype eventMsg from radioMsg with
	var ulong  hops;
    var ubyte  origin;
	var ushort temp;
end

//neighbours

var ushort[8] neighbours;
var ubyte nNeighbours = 0;

//Tables:

regtype eventMetaTable with 
    var ushort[2] neighbour;
    var ulong[2] hops;
end

var ubyte[2] sourceFlag; // has source set
sourceFlag[MIN] = FALSE;
sourceFlag[MAX] = FALSE;
var ubyte[2] interestFlag; // has interest set
interestFlag[MIN] = FALSE;
interestFlag[MAX] = FALSE;
var ubyte[2] waitingForInfo;
waitingForInfo[MIN] = FALSE;
waitingForInfo[MAX] = FALSE;

var ubyte[2] selfInterestFlag; // true if this node origined an interest;  
selfInterestFlag[MIN] = FALSE;
selfInterestFlag[MAX] = FALSE;

pktype interestInfo from radioMsg with // type of queuements
end

var eventMetaTable table_source; // armazenam sources


// Event INFO
var ubyte[2] hasTemp;
hasTemp[MIN] = FALSE;
hasTemp[MAX] = FALSE;
var ushort[2] temp;


// Identify all the neighbours:
    // BROADCAST nodeId.
    // Receive nodeIds for X ms
        // Foreach nodeId received, add to table of neighbours


// INITIALIZATION ROUTINE, for 1 sec will keep broadcasting its nodeId
// to all the neighbours and will receive from neighbours their nodeId
// and add them to a table if not there already.
par/or do
    await 5s;
with
	loop do
		var eventMsg message = await RECEIVE;
		if message.type == NEIGHBOUR_INFO then
		    var ushort neighbour = message.source;
		    var ubyte flag = 0;

			loop i,nNeighbours do
			    if neighbours[i] == neighbour then
			        flag = 1;
			        break;
			    end
			end

		    if flag == 0 then
		        neighbours[nNeighbours]=neighbour;
		        inc nNeighbours;
		    end

		end
	end
with
    loop do
        // EVERY 100ms, sends broadcast to all neighbours
        await 100ms;
        var eventMsg neighbourmsg;
        neighbourmsg.type = NEIGHBOUR_INFO;
        neighbourmsg.source = nodeId;
        neighbourmsg.target = BROADCAST;
        emit SEND(neighbourmsg);
        await SEND_DONE;
    end
end

var eventMsg sendMessage;
sendMessage.source = nodeId;

emit LEDS(OFF);

par/and do

    loop do
        var eventMsg message = await RECEIVE;
        var ubyte type_raw = message.type;
        var ubyte type = GET_TYPE(type_raw);
        var ubyte min_max = GET_MIN_MAX(type_raw);
        var ubyte send = TRUE;
        sendMessage.type = type_raw;
        var ushort index_n = (random()%nNeighbours);
        sendMessage.target = neighbours[index_n];
        sendMessage.hops = table_source.hops[min_max]+1;

        var interestInfo interest;
        interest.type = min_max;
        interest.source = message.source;

        if type == SOURCE then
            if sourceFlag[min_max] == 0 then
            //iF SOURCE DOESN'T EXIST, SETS IT
                sourceFlag[min_max] = 1;
                table_source.hops[min_max] = message.hops;
                table_source.neighbour[min_max] = message.source;
            else
            //iF SOURCE ALREADY EXIST, CHECK NUMBER OF HOPS
                if table_source.hops[min_max] > message.hops then
                    table_source.hops[min_max] = message.hops;
                    table_source.neighbour[min_max] = message.source;
                end
            end            
        else/if type == INTEREST then
			qPut(interest);

			interestFlag[min_max] = TRUE;

		else/if type == REQUEST then

            emit LED1(ON);

			// PUTS INTEREST ON QUEUE
			qPut(interest);

			if waitingForInfo[min_max] == FALSE then
				waitingForInfo[min_max] = TRUE;
			else
				send = FALSE;
			end
			if hasTemp[min_max] then
				// ALREADY HAS INFO, GENERATES INFO MESSAGE
				sendMessage.type = TYPE(INFO,min_max);
				sendMessage.hops = 1;
				sendMessage.temp = temp[min_max];
				send = TRUE;
			end
		else/if type == INFO then

            emit LED2(0);

			sendMessage.temp = message.temp;

			if selfInterestFlag[min_max] then 
                // INFORMATION ARRIVED TO ORIGIN OF INTEREST
				emit LED3(ON);
				await FOREVER;
			end

			loop i,qSize() do
				qGet(interest);

				if interest.type == min_max then
				// IF INTEREST AND INFO ARE OF THE SAME TIPE FORWARD INFO
					sendMessage.target = interest.source;

					emit SEND(sendMessage);
				else
				// IF TYPES ARE DIFFERENT PUT INTEREST BACK TO QUEUE
					qPut(interest);
				end
				interestFlag[min_max] = FALSE;
				waitingForInfo[min_max] = FALSE;
			end
		else
			send = FALSE;
        end        
		if message.hops >= MAX_HOPS then
            // IF HOPS EXCEED LIMIT, MESSAGE ISN'T FORWARDED
            send = FALSE;
        end
		if send == TRUE then
            emit SEND(sendMessage);
        end

		if waitingForInfo[min_max] == FALSE and sourceFlag[min_max] == TRUE and interestFlag[min_max] == TRUE then
			// HAS SOURCE AND INTEREST OF SMAE TYPE, TRIGGER REQUEST
			emit LED1(ON);
			sendMessage.type = TYPE(REQUEST,min_max);
			sendMessage.target = table_source.neighbour[min_max];
			sendMessage.hops = 1;
			waitingForInfo[min_max] = TRUE;
			emit SEND(sendMessage);
		end

		//await 500ms;

    end

with

	loop do
		await 5s;
		emit REQ_TEMP;

		var ushort value = await TEMP;
		var ubyte trig = FALSE;
		var ubyte minMaxType;

		if value > 550 then
			minMaxType = MAX;
			trig = TRUE;
		else/if value < 450 then
			minMaxType = MIN;
			trig = TRUE;
		end

		if trig == TRUE then
            // TRIGGS SOURCE
            sendMessage.type = TYPE(SOURCE,minMaxType);
            sendMessage.hops = 1; 
            var ushort index = (random() % nNeighbours);
            sendMessage.target = neighbours[index];
            hasTemp[minMaxType] = TRUE;
            temp[minMaxType] = value;
            table_source.hops[minMaxType] = 0;
            table_source.neighbour[minMaxType] = nodeId;
            sourceFlag[minMaxType] = TRUE;
            emit SEND(sendMessage);
            await SEND_DONE;
        end

        emit REQ_PHOTO;

        value = await PHOTO;
        trig = FALSE;

        if value > 450 then     
            minMaxType = MAX;
            trig = TRUE;
        else/if value < 350 then
            minMaxType = MIN;
            trig = TRUE;
        end

        if trig == TRUE then
            // TRIGGS INTEREST
            selfInterestFlag[minMaxType] = TRUE;
            sendMessage.type = TYPE(INTEREST,minMaxType);
            sendMessage.hops = 1; 
            var ushort index = (random() % nNeighbours);
            sendMessage.target = neighbours[index];
            emit SEND(sendMessage);
            await SEND_DONE;
        end

    end
end

