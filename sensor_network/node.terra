#include "/home/terra/TerraNG/terra/TerraNet.defs"
// 5 types of messages:
    // NEIGHBOURS package with nodeId to be used in INITIALIZATION ROUTINE
    
    // EVENT AGENT - carries information that an event was detected

    // INTEREST AGENT - carries information that a node has interest in event

    // EVENT INFORMATION - carries the actual info on the event

    // REQUEST - requests an event information

// 3 "tables"
    // NEIGHBOURS - nodeId of each neighbour (received in INITIALIZATION ROUTINE)
    // EVENT - nodeId of neighbours that broadcasted event source notification.
    // INTEREST - nodeId of neighbours that broadcasted interest in an event..
// EVENT and INTEREST might not need to be tables since the number of events is small
// and thus can be separate variables (EVENT_ORIGIN_XX and INTEREST_ORIGIN_XX where
// XX can be LT for low temp and HT for high temp). In case optimzation is done (shortest
// path) then theres also need for a third and fourth type of variable "N_JUMPS_ORIGIN_XX"
// and N_JUMPS_INTEREST_XX which keeps track of the number of jumps till origin associated
// with the neighbour in EVENT_ORIGIN_XX and INTEREST_ORIGIN_XX.

#define N_NODES 8
#define MAX_HOPS 4

var ushort nodeId = getNodeId();

// DIFFERENT MESSAGE TYPES
#define NEIGHBOUR_INFO       1
#define EVENT_SOURCE_TMIN    2
#define EVENT_SOURCE_TMAX    3
#define EVENT_INFO_TMIN      4
#define EVENT_INFO_TMAX      5
#define EVENT_INTEREST_TMIN  6
#define EVENT_INTEREST_TMAX  7
#define EVENT_REQUEST_TMIN   8
#define EVENT_REQUEST_TMAX   9

// DEBUG INFO
#define SOURCE 1 


// Is this enough to support the messages passed in?
pktype eventMsg from radioMsg with
	var ulong  hops;
    var ubyte  origin;
	var ulong temp;
end

//neighbours

var ubyte[8] neighbours;
var ubyte nNeighbours = 0;



//Tables:

regtype eventMetaTable with
    var ubyte[N_NODES] origin;
    var ulong[N_NODES] hops;
    var ubyte[N_NODES] neighbour;
end

var eventMetaTable table_interest_tmin;
var ubyte n_table_interest_tmin = 0;

var eventMetaTable table_interest_tmax;
var ubyte n_table_interest_tmax = 0;

var eventMetaTable table_source_tmin;
var ubyte n_table_source_tmin = 0;

var eventMetaTable table_source_tmax;
var ubyte n_table_source_tmax = 0;

// Event INFO
var ubyte hasMaxTemp = 0;
var ubyte hasMinTemp = 0;
var long maxTemp;
var long minTemp;

// Identify all the neighbours:
    // BROADCAST nodeId.
    // Receive nodeIds for X ms
        // Foreach nodeId received, add to table of neighbours


// INITIALIZATION ROUTINE, for 1 sec will keep broadcasting its nodeId
// to all the neighbours and will receive from neighbours their nodeId
// and add them to a table if not there already.
par/or do
    await 5s;
with
	loop do
		var eventMsg message = await RECEIVE;
		if message.type == NEIGHBOUR_INFO then
		    var ubyte neighbour = message.source;
		    var ubyte flag = 0;

			loop i,nNeighbours do
			    if neighbours[i] == neighbour then
			        flag = 1;
			        break;
			    end
			end

		    if flag == 0 then
		        neighbours[nNeighbours]=neighbour;
		        nNeighbours=nNeighbours+1;
		        emit LEDS(nNeighbours); 
		    end

		end
	end
with
    loop do
        // EVERY 100ms, sends broadcast to all neighbours
        await 100ms;
        var eventMsg neighbourmsg;
        neighbourmsg.type = NEIGHBOUR_INFO;
        neighbourmsg.source = nodeId;
        neighbourmsg.target = BROADCAST;
        emit SEND(neighbourmsg);
		//emit LED2(TOGGLE);
        await SEND_DONE;
    end
end

emit LEDS(OFF);

par/and do

    loop do
        emit REQ_TEMP();
        var short currentTemp = await TEMP;

        if currentTemp < 450 then
            minTemp = currentTemp;
            hasMinTemp = 1;

            var eventMsg sendMessage;

            if n_table_interest_tmin > 0 then

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_INFO_TMIN;
                sendMessage.hops = 1;
                sendMessage.temp  = minTemp;

                loop i, n_table_interest_tmin do
                    sendMessage.target = table_interest_tmin.neighbour[i];

                    emit SEND(sendMessage);
                end

            end

            sendMessage.source = nodeId;
            sendMessage.type = EVENT_SOURCE_TMIN;
            sendMessage.hops = 1; 
            var ubyte index = (random() % nNeighbours);
            sendMessage.target = neighbours[index];

            emit SEND(sendMessage);

            emit LEDS(SOURCE);

            await 100ms;

            emit LEDS(OFF);
        end
    end
with
    loop do
        var eventMsg message = await RECEIVE;
        // So, here we treat the different type of events:

            // EVENT AGENT - Updates the EVENT variables and forwards the message to a 
            // random neighbour. Then, if there is a INTEREST
            // registered, sends a REQUEST in the direction of the origin of EVENT.

            // INTEREST AGENT - Updates the INTEREST variables and forwards the message to
            // a random neighbour. Then, if there is an EVENT registered, sends a REQUEST in
            // the direction of the origin of EVENT.

            // EVENT INFORMATION - Forwards the message to the origin of INTEREST,if existant.

            // REQUEST - Forwards the message to the origin of EVENT, if existant.
        if message.type == EVENT_SOURCE_TMIN then

            emit LEDS(SOURCE);

            await 100ms;

            emit LEDS(OFF);

            // just for test
            if n_table_source_tmin > 0 then
                // CHECK IF NEW SOURCE IS CLOSER
                if table_source_tmin.hops[0] > message.hops then
                    table_source_tmin.hops[0] = message.hops;
                    table_source_tmin.neighbour[0] = message.source;
                end
            else
                table_source_tmin.hops[0] = message.hops;
                table_source_tmin.neighbour[0] = message.source;
                n_table_interest_tmin = n_table_interest_tmin + 1;
            end

            // FORWARD SOURCE

            if message.hops < MAX_HOPS then
                var eventMsg sendMessage;
                sendMessage.source = nodeId;
                sendMessage.type = EVENT_SOURCE_TMIN;
                sendMessage.hops = message.hops+1;
                sendMessage.target = random();

                 emit SEND(sendMessage);
            end

        else/if message.type == EVENT_SOURCE_TMAX then

             // just for test
            if n_table_source_tmax > 0 then
                // CHECK IF NEW SOURCE IS CLOSER
                if table_source_tmax.hops[0] > message.hops then
                    table_source_tmax.hops[0] = message.hops;
                    table_source_tmax.neighbour[0] = message.source;
                end
            else
                table_source_tmax.hops[0] = message.hops;
                table_source_tmax.neighbour[0] = message.source;
                n_table_interest_tmax = n_table_interest_tmax + 1;
            end

            // FORWARD SOURCE

            if message.hops < MAX_HOPS then
                var eventMsg sendMessage;
                sendMessage.source = nodeId;
                sendMessage.type = EVENT_SOURCE_TMAX;
                sendMessage.hops = message.hops+1;
                var ubyte index = (random() % nNeighbours);
                sendMessage.target = neighbours[index]; 

                emit SEND(sendMessage);
            end

        // else/if message.type == EVENT_INTEREST_TMIN then
        //     var ubyte flag = 0;
        //     // CHECK IF NEIGHBOUR IS ALREADY INTERESTED. IF POSITIVE, THE MESSAGE IS IGNORED
        //     loop i,n_table_interest_tmin do
        //         if message.source == table_interest_tmin.neighbour[i] then
        //             flag = 1;
        //             break;
        //         end
        //     end

        //     // NEW INTEREST
        //     if flag == 0 then

        //      // ADD NEIGHBOUR TO TABLE OF INTERESTS
        //         table_interest_tmin.hops[n_table_interest_tmin] = message.hops;
        //         table_interest_tmin.neighbour[n_table_interest_tmin] = message.source;
        //         n_table_interest_tmin = n_table_interest_tmin +1;

        //         // CHECK IF I ALREADY KNOW A SOURCE FOR THE EVENT
        //         var eventMsg sendMessage;

        //         if n_table_source_tmin > 0 then
        //             // HAS SOURCE FOR EVENT. REQUEST INFO
        //             sendMessage.source = nodeId;
        //             sendMessage.type = EVENT_REQUEST_TMIN;
        //             sendMessage.hops = 1;
        //             sendMessage.target = table_source_tmin.neighbour[0];

        //             emit SEND(sendMessage);
        //         else
        //             // FORWARD INTEREST
        //             if message.hops < MAX_HOPS then
        //                 sendMessage.source = nodeId;
        //                 sendMessage.type = EVENT_INTEREST_TMIN;
        //                 sendMessage.hops = message.hops+1;
        //                 var ubyte index = (random() % nNeighbours);
        //                 sendMessage.target = neighbours[index]; 

        //                 emit SEND(sendMessage);
        //             end

        //         end


        //     end

        // else/if message.type == EVENT_INTEREST_TMAX then

            var ubyte flag = 0;
            // CHECK IF NEIGHBOUR IS ALREADY INTERESTED. IF POSITIVE, THE MESSAGE IS IGNORED
            loop i,n_table_interest_tmax do
                if message.source == table_interest_tmax.neighbour[i] then
                    flag = 1;
                    break;
                end
            end

            // NEW INTEREST
            if flag == 0 then

             // ADD NEIGHBOUR TO TABLE OF INTERESTS
                table_interest_tmax.hops[n_table_interest_tmax] = message.hops;
                table_interest_tmax.neighbour[n_table_interest_tmax] = message.source;
                n_table_interest_tmax = n_table_interest_tmax +1;

                // CHECK IF I ALREADY KNOW A SOURCE FOR THE EVENT
                // for now, multiple sources are not being treated makes sense to have a table for events?? or only the nearest source??
                var eventMsg sendMessage;
                if n_table_source_tmax > 0 then
                    // HAS SOURCE FOR EVENT. REQUEST INFO
                    sendMessage.source = nodeId;
                    sendMessage.type = EVENT_REQUEST_TMAX;
                    sendMessage.hops = 1;
                    sendMessage.target = table_interest_tmax.neighbour[0];

                    emit SEND(sendMessage);
                else
                    // FORWARD INTEREST
                    if message.hops < MAX_HOPS then
                        sendMessage.source = nodeId;
                        sendMessage.type = EVENT_INTEREST_TMAX;
                        sendMessage.hops = message.hops+1;
                        var ubyte index = (random() % nNeighbours);
                        sendMessage.target = neighbours[index]; 

                        emit SEND(sendMessage);
                    end

                end
            end

        else/if message.type == EVENT_REQUEST_TMIN then

            var eventMsg sendMessage;
            // CHECK IF SOURCE OF EVENT 
            if hasMinTemp > 0 then 

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_INFO_TMIN;
                sendMessage.hops = 1; // has number of hops?
                sendMessage.target = message.source;
                sendMessage.temp  = minTemp;

                emit SEND(sendMessage);


            // CHECK IF REALLY HAS THE SOURCE
            else/if n_table_interest_tmin > 0 then

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_REQUEST_TMIN;
                sendMessage.hops = message.hops+1; // has number of hops?
                sendMessage.target = table_source_tmin.neighbour[0];

                emit SEND(sendMessage);
            else
            end

        else/if message.type == EVENT_REQUEST_TMAX then

         var eventMsg sendMessage;
            // CHECK IF SOURCE OF EVENT 
            if hasMaxTemp > 0 then 

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_INFO_TMAX;
                sendMessage.hops = 1; // has number of hops?
                sendMessage.target = message.source;
                sendMessage.temp  = maxTemp;

                emit SEND(sendMessage);


            // CHECK IF REALLY HAS THE SOURCE
            else/if n_table_interest_tmax > 0 then

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_REQUEST_TMAX;
                sendMessage.hops = message.hops+1;
                sendMessage.target = table_source_tmax.neighbour[0];

                emit SEND(sendMessage);
            else
            end

        else/if message.type == EVENT_INFO_TMAX then

            var eventMsg sendMessage;

            loop i,n_table_interest_tmax do

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_INFO_TMAX;
                sendMessage.temp = message.temp;
                sendMessage.hops = message.hops+1;
                sendMessage.target = table_interest_tmax.neighbour[i];

                emit SEND(sendMessage);

            end

        else/if message.type == EVENT_INFO_TMIN then

            var eventMsg sendMessage;

            loop i,n_table_interest_tmax do

                sendMessage.source = nodeId;
                sendMessage.type = EVENT_INFO_TMIN;
                sendMessage.temp = message.temp;
                sendMessage.hops = message.hops+1;
                sendMessage.target = table_interest_tmin.neighbour[i];

                emit SEND(sendMessage);

            end
        end

    end
end

